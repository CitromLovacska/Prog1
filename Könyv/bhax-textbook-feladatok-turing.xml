<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:      
	<itemizedlist mark='linkek'>
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/EgyMagV%C3%A9gtelen0.c">Egy mag 0%.</link>
	</para>
	</listitem>     
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/EgyMagV%C3%A9gtelen100.c">Egy mag 100%.</link>
	</para>
	</listitem> 
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/%C3%96sszesMagV%C3%A9gtelen100.c">Összes mag 100%.</link>
	</para>
	</listitem>  
	</itemizedlist>    
        </para>
        <para>
	A számítógépen egy végtelen ciklus futtatása közben megközelítőleg 0%-os CPU terhelést a "sleep (1)" rendszerhívással tudunk elérni. Ez esetben a következő 1 milliszekundumban nem fogunk CPU-időt kapni így nem lesz leterhelve a CPU.
	Egy mag 100%-os felhasználására elég csak egy végtelen ciklust írnunk.
	Az összes mag/szál (számítógépem esetében két mag és annak négy logikai szálja) 100%-os kihasználására az egyik lehetőség "forkolni", mely által egy adott szülőprocessznek csinálunk gyermekprocesszeket (akár többet is), melyek egymás mellett futnak ugyanarra az utasításra. Esetemben négy végtelen ciklus, melyekből hármat "forkoltam" elegendőnek bizonyultak kihasználni a CPU összes magját/szálát 100%-on.
        </para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
	A programozás és a lefagyó program problémája szinte egyidősnek számítanak. Alan Turing (akinek a neve köthető a Turing-gép fogalmához) bizonyította be matematikailag, hogy efféle programot lehetetlenség írni. Egy könyebb, kevesebb sorból álló programnál el lehet dönteni, hogy le fog fagyni, de egy bonyolult, hosszú sorokból álló és összetett programnál ezt képtelenség megmondani.
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  
	<itemizedlist mark='linkek'>
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/V%C3%A1ltoz%C3%B3k%C3%89rt%C3%A9kcser%C3%A9je.c">Változók értékének cseréje.</link>
	</para>
	</listitem>
	</itemizedlist>
        </para>
        <para>
	Két változó értékét az egyik legegyszerűbben úgy tudjuk felcserélni, hogy beiktatunk egy harmadik változót a programba. Így, ha az értékeket egyenlővé tesszük egy másik választottal. Pl: a, b, c esetében c legyen egyenlő a-val, a legyen egyenlő b-vel és b legyen egyenlő c-vel. Ezt sorrendben elvégezve az értékek felcserélődnek. Azonban logikai utasítás vagy kifejezés nélkül csak a két megadott változóból indulhatunk ki. Ebben a helyzetben pl. pár logikus összeadás és kivonás elvégzése után az értékek szintén felcserélődnek.
        </para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:  
	<itemizedlist mark='linkek'>
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/Labdapattogtat%C3%A1s.c">Labdapattogtatás.</link>
	</para>
	</listitem>
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/LabdaPattogtat%C3%A1sIfN%C3%A9lk%C3%BCl.c">Labdapattogtatás if nélkül.</link>
	</para>
	</listitem>
	</itemizedlist>
        </para>
        <para>
	Ebben a programban az első lépés a megfelelő függvény megtalálása volt egy "labda" (igazából egy karakter, mint pl: "O") "pattogtatására" (terminál ablakban való megjelenítésére). Lényeges az is, hogy az ablakunkból ne menjen ki a "labda". Az "ncurses" függvénykönyvtár alkalmas használatra, mivel terminálban dolgozunk. A változók értékeit igény szerint beállítjuk mindkét tengelyen, majd az "mvprintw" függvénnyel kiiratjuk pl. az "O" karaktert. A "refresh" függvénnyel tudunk kimenetet láttatni a terminálban, a "usleep"-el pedig be tudjuk állítani milyen időközönként is rajzoljon ki egy karaktert a program.
        </para>
    </section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
	Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
	Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: 
	<itemizedlist mark='linkek'>
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/Sz%C3%B3hossz.c">Szóhossz.</link>
	</para>
	</listitem>
	</itemizedlist>
        </para>
        <para>
	Egy szó hosszának megszámolására elsőnek egy "int" változót kell létrehoznunk a programban és ezt egyenlővé kell tennünk eggyel. Balra léptetve, ameddig csak lehet és számolva a léptetések számát végül megkapjuk eredményül mennyire hosszú az adott szó amit vizsgálunk.
        </para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása: 
	<itemizedlist mark='linkek'>
	<listitem>
	<para>
	<link xlink:href="https://github.com/CitromLovacska/Prog1/blob/master/Turing/PageRank.c">PageRank.</link>
	</para>
	</listitem>
	</itemizedlist>
        </para>
        <para>
	A PageRank algoritmust a Google-nél fejlesztette ki Larry Page és Sergey Brin (Page-ről kapta meg a nevét). Gondolatmenetük alapján minél több oldal mutat rá egy adott oldalra, annak annál nagyobb az értéke. Gyakorlatban persze ez nem ilyen egyszerű, viszont egy oldal fontossága valóban látható azáltal, hogy hány másik oldal is mutat rá.
Természeten a Google a PageRank algoritmus egy teljesen átdolgozott változatát használja (az is lehet, hogy az merőben eltér az eredetitől). Annak a forráskódját nem is publikálták, ami egyértelmű, hiszen máskülönben egy kis munkával és utánajárással akárki indíthatna keresőszolgáltatást.
	</para>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
	<para>
	A prímszámok érdekessége az, hogy csak eggyel és önmagukkal osztva nem adnak maradékot. Az olyan prímeket melyeket kivonva egymásból kettőt kapunk maradékul, ikerprímeknek nevezzük.
A Brun-tétel azt mondja ki, ha az ikerprímek reciprokát vesszük és elkezdjük őket összeadni, akkor azok egy konstanshoz fognak konvergálni. Ez a tétel viszont önmagában nem megoldás az ikerprímek számának problémájára, ugyanis azt nem mondja ki, hogy az összeadásokból kapott hosszú sor véges-e vagy végtelen.
        </para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
	Az R programozási nyelv főleg statisztikai számításokra alkalmas, interpreteres nyelv. Ez az egyik oka annak, hogy könnyen lehet olvasni és értelmezni a Monthy Hall problémára megalkotott R program forrását. Az említett probléma egy TV show-ból származtatható, ahol három ajtó áll előttünk és ezek közül kell választanunk. Az egyik ajtó kincset rejt, míg a másik kettő mögött nem található semmi. A szimuláció által azt vizsgáljuk, hogy melyik az érdemesebb: ugyanannál az ajtónál maradni a játék körei alatt vagy váltogatni az ajtókat végig. A program kimenetét vizsgálva azt tudjuk megállapítani, hogy 100000000 lefutás után az eredmény az, hogy igenis érdemes váltogatni az ajtókat a játék alatt, így akár 50%-os javulást is elérhetünk.
        </para>
    </section>

</chapter>                
